/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DAO;

import Model.Lugar;
import Model.Pessoa;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Victor
 */
public class DAOLugar extends DAOGeneric implements DAO<Lugar> {
    
    public DAOLugar() throws SQLException, ClassNotFoundException {
        this.criarTabela();
    }

    //CRIANDO A TABELA Jogador
    public void criarTabela() throws ClassNotFoundException, SQLException {
	try{
            this.openConnection();
			
		String sql = "CREATE TABLE IF NOT EXISTS Lugar " +
					 " (ID INTEGER GENERATED BY DEFAULT AS IDENTITY "+
                                         " (START WITH 1, INCREMENT BY 1) NOT NULL," +
					 " name varchar(25)," +
					 " descricao varchar(500)," +
                                         " site varchar(200)," +
					 " PRIMARY KEY (ID) )";

			this.execute(sql);
			this.closeConnection();
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}	
    }

    public void insert(Lugar obj) throws SQLException, ClassNotFoundException {

		try{
			this.openConnection();

			String sql = "INSERT INTO Lugar (name, descricao, site)"
					+ " VALUES ('" + obj.getNome() + "', '" + obj.getDescricao()+ "', '"+obj.getSite()+"' )";

			int id = this.executeUpdate(sql);

			obj.setId(id);

			this.closeConnection();

		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
        
    }

    public void update(Lugar obj) throws ClassNotFoundException, SQLException {

        this.openConnection();

        String sql = "UPDATE Lugar"
                + " SET name = '" + obj.getNome()
                + "' , descricao = '" + obj.getDescricao()
                + "' , site = '" + obj.getSite()
                + "' Where ID = " + obj.getId();

        // System.out.println(sql);
        int id = this.executeUpdate(sql);

        obj.setId(id);

        this.closeConnection();

    }

    public void delete(Lugar obj) throws ClassNotFoundException, SQLException {

        this.openConnection();

        String sql = "DELETE FROM Lugar " + "Where ID = " + obj.getId();

        int id = this.executeUpdate(sql);

        obj.setId(id);

        this.closeConnection();


    }

    public Lugar findbyID(int id) throws ClassNotFoundException, SQLException {
        //Query para buscar o card
        this.openConnection();

        String sql = "SELECT * FROM Lugar WHERE ID =" + id;

        ResultSet rs = this.executeQuery(sql);

        List<Lugar> cards = retriveJogadors(rs);

        this.closeConnection();

        return cards.get(0);
    }

    public List<Lugar> findAll() throws SQLException, ClassNotFoundException {
        // TODO Auto-generated method stub
      this.openConnection();

        String sql = "SELECT * FROM Lugar ";

        ResultSet rs = this.executeQuery(sql);

        List<Lugar> cards = retriveJogadors(rs);

       this.closeConnection();

        return cards;
    }

    //fazer primeiro jogador Dao
    private List<Lugar> retriveJogadors(ResultSet rs) throws SQLException {
        List<Lugar> jogadoreslist = new ArrayList<Lugar>();

        while (rs.next()) {
            Lugar j = new Lugar();

            j.setId(rs.getInt("ID"));

            j.setNome(rs.getString("name"));
            
            j.setDescricao(rs.getString("descricao"));
      
            j.setSite(rs.getString("site"));
            
            jogadoreslist.add(j);
        }

        return jogadoreslist;
    }

    public Lugar create() {
        return new Lugar();
    }

	public Lugar findbyID(Long id) throws SQLException, ClassNotFoundException {
		throw new UnsupportedOperationException("Not supported yet.");
	}
    
}
